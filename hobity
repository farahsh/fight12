package methodesUnderstanding;

import java.util.Scanner;

public class MainClass{
	public static void main(String[] args) {
		Scanner sc = new Scanner (System.in);
			
//declaring the dimensions of the Arena:
		int height = 0;
		int length = 0;
			
		System.out.println("Please Enter the height than the length of the Arena: ");
			
		while(height <=3 || length <= 2) {
			height = sc.nextInt();
			length = sc.nextInt();
			if (height >= 4 && length >= 3) {
				break;
			}
			System.out.println("hight should at least be 4 and length should at least be 3. Please enter different values: ");
		} 
			
//The initial coordinates of player
		int x = 1;
		int y = length/2;
		System.out.println("The figth begins...");
		drawArena(height, length, x, y);

		
//Health Points of Player and dragon
		int hpPlayer = 20;
		int hpDragon = 20;
//Damage points of the weapons:
		int bowAndArrow = 4;
		int sword = 3;
		int dragonFire = 5;


//		System.out.println("To Move use WASD and Q to stay at your current posision: ");

		while (hpPlayer > 0 && hpDragon > 0) {
			
//this two for loops print the health points:
			
			System.out.print("Leben des Helden:  ");
			for (int i = hpPlayer; i > 0; i--) {
				System.out.print("O ");
			}
			System.out.println();
			System.out.print("Leben des Drachen: ");
			for (int i = hpDragon; i > 0; i--) {
				System.out.print("X ");
			}
			System.out.println();
			System.out.println();
			System.out.println("To Move use WASD and Q to stay at your current posision: ");
			
			boolean validMove = false;
			while (validMove == false){
				
//stores the player's temporary move:
				int[] tempXY = move(x, y, sc);
				if(walkable(tempXY[0], tempXY[1], height, length) == true){
					x = tempXY[0];
					y = tempXY[1];
					drawArena(height, length, x, y);
					validMove = true;
				} else {
					System.out.println("The path is blocked! choose another direction! ");
					drawArena(height, length, x, y);
					continue;
				}
			}

			int random1 = (int) (Math.random() * 100);
			
			boolean validWeapon = true;
			while(validWeapon == true){
				System.out.println("Please choose a weapon: 1 or 2 ");
				
				int weaponIn = sc.nextInt();
				if (weaponIn == 1) {
					if ( random1 <= 40 +(60/height)*((height-4) *distance(x, height)) ) {
					
						hpDragon -= bowAndArrow;
						validWeapon = false;
						System.out.println("Der Drache wurde getroffen.");
					} else {
						System.out.println("Der Drache wurde verfehlt.");
					}
				} else if (weaponIn == 2) {
					if (distance(x, height) == 0){
						hpDragon -= sword;
						System.out.println("you used the sowrd ");
						break;
					}  else { 
						System.out.println("you cant use sowrd here, choose a dif weapon");
						validWeapon = true;
						continue;
					}
				
				} else {
					System.out.println("Bitte geben Sie eine gültige Auswahl ein!");
					continue;
				}
				

				
				
			}
				
			
				
			
			
	/**
	* this "if" statement is used so that the while loop will 
	* break if the dragon dies without letting the Dragon
	* have another turn:
	**/
			if (hpDragon <= 0) {
				break;
			}
	//here's the dragon's turn:
			int random2 = (int) (Math.random() * 100);
			if (random2 <= 50) {
				hpPlayer -= dragonFire;
				System.out.println("Der Held wurde verletzt.");
			} else {
				System.out.println("Der Drache hatte eine Fehlzündung. Glück gehabt.");
			}
		}
		if (hpPlayer <= 0 ){
			System.out.println("you have lost! ");
		} else {
			System.out.println("The dragon has won! ");
		}
		
	}
		
/**
 * 
 * @param xMove
 * @param yMove
 * @param inputWASDQ
 * @return
 */
	
	public static int [] move(int xMove, int yMove, Scanner sc){
		
		int[] tempXY = new int[2];
		boolean looping = true;
		while(looping == true){ //while loop keeps running until user enters a valid choice
			char moveTo = sc.next().charAt(0);
			switch (moveTo) {
			
				case 'w':	xMove -= 1;
							looping = false;
							break;
				case 'a':	yMove -= 1;
							looping = false;
							break;
				case 's':	xMove += 1;
							looping = false;
							break;
				case 'd':	yMove += 1;
							looping = false;
							break;
				case 'q':	looping = false;
							break;
				default :	looping = true;
							System.out.println("Please Enter a valid value: ");
							continue;
			}
		}
		
		tempXY[0] = xMove;
		tempXY[1] = yMove;
		return tempXY;
	}
	
/**
 * this method tests if the move is valid
 * @param x
 * @param y
 * @param h
 * @param l
 * @return
 */
	
	public static boolean walkable(int x, int y, int h, int l) {
		boolean walk = true;
		if (x == 0 || y == 0 || x == h - 1 || y == l -1){ // this to prevent the player from walking on walls
			walk = false;
		} else if(x ==  h - 2 && y == l/2) { // this to prevent the player from walking on dragon
			walk = false;
		} else {
			walk = true;
		}
		return walk;
	}
	
		
/** 
 * this method takes the length, height, and
 * the coordinates of player and draws the arena:
 * 
 * @param h height of Arena
 * @param l length of Arena
 * @param x1 possision X of player
 * @param y1 possision y of player
 */
	
	public static void drawArena(int h, int l, int x1, int y1) {
		char[][] field = new char[h][l];
		int i = 0;
		int j = 0;
		while (i < h) {
			for (j = 0 ; j < l ; j++){
				if (x1 == i && y1 == j){
					field[i][j] = 'P';
				} else if ((i == h -2) && (j == l/2)){
					field[i][j] =  'D';
				} else if (i == 0 || j == 0 || i == h-1 || j ==l-1) {
					field[i][j] = '#';
				} else {
					field[i][j] =  ' ';
				}
				System.out.print(field[i][j]);
			}
			i++;
			System.out.println();
		}
	}
	
//calculates the distance between the player and the dragon
	public static int distance(int x, int h ){
		int distance = h - x - 2;
		return distance;
	}
}